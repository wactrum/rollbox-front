/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users": {
    get: operations["UsersController_findAll"];
    post: operations["UsersController_create"];
  };
  "/users/{id}": {
    get: operations["UsersController_findOne"];
    delete: operations["UsersController_remove"];
    patch: operations["UsersController_update"];
  };
  "/users/{id}/set-roles": {
    /** @description Установить роли пользователю */
    patch: operations["UsersController_setRoles"];
  };
  "/login": {
    /** @description Авторизация в системе */
    post: operations["AuthController_login"];
  };
  "/refresh-token": {
    /** @description Обновление токена */
    post: operations["AuthController_refreshToken"];
  };
  "/register": {
    /** @description Регистрация */
    post: operations["AuthController_register"];
  };
  "/send-reset-password": {
    /** @description Выслать письмо для сброса пароля */
    post: operations["AuthController_sendResetPassword"];
  };
  "/confirm-reset-password": {
    /** @description Подтвердить сброс пароля */
    post: operations["AuthController_confirmResetPassword"];
  };
  "/email-confirmation/confirm": {
    /** @description Подтвердить Email */
    post: operations["ConfirmationController_confirm"];
  };
  "/email-confirmation/resend-confirmation-link": {
    /** @description Повторно отправить ссылку для подтверждения Email */
    post: operations["ConfirmationController_resendConfirmationLink"];
  };
  "/roles": {
    get: operations["RolesController_findAll"];
    post: operations["RolesController_create"];
  };
  "/roles/{id}": {
    get: operations["RolesController_findOne"];
    delete: operations["RolesController_remove"];
    patch: operations["RolesController_update"];
  };
  "/roles/permissions": {
    /** @description Список доступов системы */
    get: operations["RolesController_getPermissions"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateUserDto: {
      name: string;
      email: string;
      password: string;
    };
    PermissionEntity: {
      id: number;
      name: string;
    };
    RoleEntity: {
      permissions?: (components["schemas"]["PermissionEntity"])[];
      id: number;
      name: string;
    };
    UserEntity: {
      roles: (components["schemas"]["RoleEntity"])[];
      id: number;
      name: string | null;
      email: string;
      /** Format: date-time */
      createdAt: string;
    };
    UpdateUserDto: {
      name?: string;
      email?: string;
      password?: string;
    };
    AttachRoleDto: {
      roles: (number)[];
    };
    AuthDto: {
      email: string;
      password: string;
    };
    LoginResponseDto: {
      user: components["schemas"]["UserEntity"];
      accessToken: string;
      refreshToken: string;
    };
    RefreshTokenDto: {
      token: string;
    };
    RegisterDto: {
      email: string;
      name: string;
      password: string;
    };
    ResetPasswordDto: {
      email: string;
    };
    ConfirmResetPasswordDto: {
      email: string;
      token: string;
      password: string;
    };
    ConfirmDto: {
      token: string;
    };
    CreateRoleDto: {
      name: string;
      permissions: (number)[];
    };
    UpdateRoleDto: {
      name?: string;
      permissions?: (number)[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  UsersController_findAll: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["UserEntity"])[];
        };
      };
    };
  };
  UsersController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  UsersController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  UsersController_remove: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: never;
    };
  };
  UsersController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  /** @description Установить роли пользователю */
  UsersController_setRoles: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachRoleDto"];
      };
    };
    responses: {
      200: never;
      201: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  /** @description Авторизация в системе */
  AuthController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
      201: never;
    };
  };
  /** @description Обновление токена */
  AuthController_refreshToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
      201: never;
    };
  };
  /** @description Регистрация */
  AuthController_register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  /** @description Выслать письмо для сброса пароля */
  AuthController_sendResetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordDto"];
      };
    };
    responses: {
      200: never;
      201: never;
    };
  };
  /** @description Подтвердить сброс пароля */
  AuthController_confirmResetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfirmResetPasswordDto"];
      };
    };
    responses: {
      200: never;
      201: never;
    };
  };
  /** @description Подтвердить Email */
  ConfirmationController_confirm: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfirmDto"];
      };
    };
    responses: {
      200: never;
      201: never;
    };
  };
  /** @description Повторно отправить ссылку для подтверждения Email */
  ConfirmationController_resendConfirmationLink: {
    responses: {
      201: never;
    };
  };
  RolesController_findAll: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["RoleEntity"])[];
        };
      };
    };
  };
  RolesController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoleDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RoleEntity"];
        };
      };
      201: never;
    };
  };
  RolesController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RoleEntity"];
        };
      };
    };
  };
  RolesController_remove: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: never;
    };
  };
  RolesController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleDto"];
      };
    };
    responses: {
      200: never;
    };
  };
  /** @description Список доступов системы */
  RolesController_getPermissions: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["PermissionEntity"])[];
        };
      };
    };
  };
}
